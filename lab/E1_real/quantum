mm.c: * mm.c - Memory Management: Paging & segment memory management
mm.c:/* alloc_frame - Search a free physical page (== frame) and mark it as USED_FRAME. 
mm.c: * Returns the frame number or -1 if there isn't any frame available. */
mm.c:    return -1;
mm.c:/* free_frame - Mark as FREE_FRAME the frame  'frame'.*/
mm.c:/* set_ss_pag - Associates logical page 'page' with physical page 'frame' */
mm.c:/* del_ss_pag - Removes mapping from logical page 'logical_page' */
mm.c:/* get_frame - Returns the physical frame associated to page 'logical_page' */
Binary file sys.o matches
Binary file zeos.bin matches
sys_call_table.S:MAX_SYSCALL = (. - sys_call_table)/4
sched.c: * sched.c - initializes struct for task 0 anda task 1
sched.c:/* get_DIR - Returns the Page Directory address for task 't' */
sched.c:	return t->dir_pages_baseAddr;
sched.c:/* get_PT - Returns the Page Table address for task 't' */
sched.c:	return (page_table_entry *)(((unsigned int)(t->dir_pages_baseAddr->bits.pbase_addr))<<12);
sched.c:	pos = ((int)t-(int)task)/sizeof(union task_union);
sched.c:	t->dir_pages_baseAddr = (page_table_entry*) &dir_pages[pos]; 
sched.c:	idle_task->PID = 0; // Assign a PID
sched.c:	idle_task->quantum = 10;
sched.c:	task_union_idle_task->stack[KERNEL_STACK_SIZE- 1] = (unsigned long)&cpu_idle; // Set the return addr
sched.c:	task_union_idle_task->stack[KERNEL_STACK_SIZE - 2] = 0;
sched.c:	idle_task->kernel_esp = (int)&task_union_idle_task->stack[KERNEL_STACK_SIZE - 2];
sched.c:	ini_task-> PID = 1; // Assing PID
sched.c:	ini_task->state = ST_RUN;
sched.c:	update_esp((int) &u->stack[KERNEL_STACK_SIZE]);
sched.c:	set_cr3(ini_task->dir_pages_baseAddr);
sched.c:		t->quantum = DEFAULT_QUANTUM;
sched.c:		t->PID = i+2;
sched.c:		t->state = -1;
sched.c:		list_add_tail( &t->list, &freequeue );
sched.c:	update_esp((int) &new->stack[KERNEL_STACK_SIZE]);
sched.c:	set_cr3(new->task.dir_pages_baseAddr);
sched.c:	inner_inner_task_switch(&(new->task.kernel_esp), &(current()->kernel_esp));
sched.c:	t->quantum = new_quantum;
sched.c:	return t->quantum;
sched.c:	current()->quantum--;
sched.c:	return (current()->quantum <= 0);
sched.c:	if (t->state != ST_RUN) {
sched.c:		list_del(&t->list);
sched.c:		list_add_tail(&t->list, dest);
sched.c:		t->state = ST_READY;
sched.c:		t->state = -1;
sched.c:		t->state = ST_RUN;
sched.c:		t->s.total_trans++;
sched.c:		task_to_execute->quantum = DEFAULT_QUANTUM;
sched.c:	t->state = ST_READY;
sched.c:	t->s.user_ticks = 0;
sched.c:	t->s.system_ticks = 0;
sched.c:	t->s.blocked_ticks = 0;
sched.c:	t->s.ready_ticks = 0;
sched.c:	t->s.elapsed_total_ticks = 0;
sched.c:	t->s.total_trans = 0;
sched.c:	t->s.remaining_ticks = DEFAULT_QUANTUM;
sched.c:	current()->s.user_ticks += get_ticks() - current()->s.elapsed_total_ticks;
sched.c:	current()->s.elapsed_total_ticks = get_ticks();
sched.c:	current()->s.system_ticks += get_ticks() - current()->s.elapsed_total_ticks;
sched.c:	current()->s.elapsed_total_ticks = get_ticks();
sched.c:	current()->s.system_ticks += get_ticks() - current()->s.elapsed_total_ticks;
sched.c:	current()->s.elapsed_total_ticks = get_ticks();
sched.c:	t->s.ready_ticks += get_ticks() - t->s.elapsed_total_ticks;
sched.c:	t->s.elapsed_total_ticks = get_ticks();
.gdbcmd:define print-stack
.gdbcmd:add-symbol-file user 0x00100040
Makefile:AS86	= as86 -0 -a
Makefile:LD86	= ld86 -0
Makefile:HOSTCFLAGS = -Wall -Wstrict-prototypes -g
Makefile:CC      = gcc -m32
Makefile:AS      = as --32
Makefile:LD      = ld -melf_i386
Makefile:OBJCOPY = objcopy -O binary -R .note -R .comment -S
Makefile:CFLAGS = -O2  -g $(JP) -fno-omit-frame-pointer -ffreestanding -Wall -I$(INCLUDEDIR)
Makefile:ASMFLAGS = -I$(INCLUDEDIR)
Makefile:SYSLDFLAGS = -T system.lds
Makefile:USRLDFLAGS = -T user.lds
Makefile:LINKFLAGS = -g
Makefile:LIBZEOS = -L . -l zeos -l auxjp
Makefile:	$(HOSTCC) $(HOSTCFLAGS) -o $@ $<
Makefile:	$(LD86) -s -o $@ $<
Makefile:	$(AS86) -o $@ $<
Makefile:	$(CPP) $(ASMFLAGS) -traditional $< -o $@
Makefile:	$(CPP) $(ASMFLAGS) -o $@ $<
Makefile:	$(CPP) $(ASMFLAGS) -o $@ $<
Makefile:	$(CPP) $(ASMFLAGS) -o $@ $<
Makefile:	as --32   -o wrapper.o wrapper.s
Makefile:	$(LD) $(LINKFLAGS) $(SYSLDFLAGS) -o $@ $< $(SYSOBJ) $(LIBZEOS) 
Makefile:	$(LD) $(LINKFLAGS) $(USRLDFLAGS) -o $@ $< $(USROBJ)
Makefile:	gcc -m32 -g -fno-omit-frame-pointer -ffreestanding -Wall -Iinclude   -c -o user.o user.c
Makefile:	rm -f *.o *.s bochsout.txt parport.out system.out system bootsect zeos.bin user user.out *~ build 
Makefile:	bochs -q -f .bochsrc
Makefile:	bochs -q -f .bochsrc_gdb &
Makefile:	gdb -x .gdbcmd system
Makefile:	bochs_nogdb -q -f .bochsrc
Binary file build matches
Binary file system matches
Binary file hardware.o matches
Binary file user matches
Binary file sched.o matches
Binary file mm.o matches
Makefile2:AS86	= as86 -0 -a
Makefile2:LD86	= ld86 -0
Makefile2:HOSTCFLAGS = -Wall -Wstrict-prototypes -g
Makefile2:CC      = gcc -m32
Makefile2:AS      = as --32
Makefile2:LD      = ld -melf_i386
Makefile2:OBJCOPY = objcopy -O binary -R .note -R .comment -S
Makefile2:CFLAGS = -O2  -g $(JP) -fno-omit-frame-pointer -ffreestanding -Wall -I$(INCLUDEDIR)
Makefile2:ASMFLAGS = -I$(INCLUDEDIR)
Makefile2:SYSLDFLAGS = -T system.lds
Makefile2:USRLDFLAGS = -T user.lds
Makefile2:LINKFLAGS = -g
Makefile2:LIBZEOS = -L . -l zeos -l auxjp
Makefile2:	$(HOSTCC) $(HOSTCFLAGS) -o $@ $<
Makefile2:	$(LD86) -s -o $@ $<
Makefile2:	$(AS86) -o $@ $<
Makefile2:	$(CPP) $(ASMFLAGS) -traditional $< -o $@
Makefile2:	$(CPP) $(ASMFLAGS) -o $@ $<
Makefile2:	$(CPP) $(ASMFLAGS) -o $@ $<
Makefile2:	$(CPP) $(ASMFLAGS) -o $@ $<
Makefile2:	$(LD) $(LINKFLAGS) $(SYSLDFLAGS) -o $@ $< $(SYSOBJ) $(LIBZEOS) 
Makefile2:	$(LD) $(LINKFLAGS) $(USRLDFLAGS) -o $@ $< $(USROBJ)
Makefile2:	rm -f *.o *.s bochsout.txt parport.out system.out system bootsect zeos.bin user user.out *~ build 
Makefile2:	bochs -q -f .bochsrc
Makefile2:	bochs -q -f .bochsrc_gdb &
Makefile2:	gdb -x .gdbcmd system
Makefile2:	bochs_nogdb -q -f .bochsrc
bootsect.s:# 1 "<built-in>"
bootsect.s:# 1 "<command-line>"
bootsect.s:# 31 "<command-line>"
bootsect.s:# 1 "/usr/include/stdc-predef.h" 1 3 4
bootsect.s:# 17 "/usr/include/stdc-predef.h" 3 4
bootsect.s:# 32 "<command-line>" 2
bootsect.s:SETUPSECS = 0			! default nr of setup-sectors
bootsect.s:BOOTSEG   = 0x07C0		! original address of boot-sector
bootsect.s:INITSEG   = 0x9000		! final address of boot-sector
bootsect.s:SYSSEG    = 0x1000		! kernel (protected-mode) address
bootsect.s:go:	mov	di,#0x4000-12	! 0x4000 is arbitrary value >= length of
bootsect.s:	mov	ss,ax		! put stack at INITSEG:0x4000-12.
bootsect.s:! well, that went ok, I hope. Now we have to reprogram the interrupts :-(
bootsect.s:! we put them right after the intel-reserved hardware interrupts, at
bootsect.s:! int 0x20-0x2F. There they won't mess up anything. Sadly IBM really
bootsect.s:! rectify it afterwards. Thus the bios puts interrupts at 0x08-0x0f,
bootsect.s:	out	#0x20,al	! send it to 8259A-1
bootsect.s:	out	#0xA0,al	! and to 8259A-2
bootsect.s:	mov	al,#0x04	! 8259-1 is master
bootsect.s:	mov	al,#0x02	! 8259-2 is slave
bootsect.s:! things as simple as possible, we do no register set-up or anything,
bootsect.s:! we let the GNU-compiled 32-bit programs do that. We just jump to
bootsect.s:! in 32-bit protected mode.
bootsect.s:	mov	cr0,eax		! a partir del 1 aix�ja � possible fer-ho
bootsect.s:! Well, that certainly wasn't fun :-(. Hopefully it works, and we don't
bootsect.s:! need no steenking BIOS anyway (except for the initial loading :-).
bootsect.s:!	Manual, Mixing 16-bit and 32-bit code, page 16-6)
bootsect.s:	db	0x66,0xea	! prefix + jmpi-opcode
bootsect.s:! in:	es - starting address segment (normally 0x1000)
bootsect.s:	jnz	empty_8042_loop	! yes - loop
bootsect.s:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
bootsect.s:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
bootsect.s:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
bootsect.s:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
Binary file libzeos.a matches
Binary file libjp2.a matches
Binary file libc.o matches
generate_gdbcmd_file.sh:TEXT=$(readelf -R .text user|grep 0x|head -1|cut -d' ' -f3)
interrupt.c: * interrupt.c -
interrupt.c:  'b','n','m',',','.','-','\0','*',
interrupt.c:  '8','9','-','4','5','6','+','1',
interrupt.c:  /* THE INTERRUPTION GATE FLAGS:                          R1: pg. 5-11  */
interrupt.c:  /* THE TRAP GATE FLAGS:                                  R1: pg. 5-11  */
interrupt.c:     the system calls will be thread-safe. */
interrupt.c:  idtR.limit = IDT_ENTRIES * sizeof(Gate) - 1;
utils.c:    size -= 4;
utils.c:    size --;
utils.c:/* Copia de espacio de usuario a espacio de kernel, devuelve 0 si ok y -1 si error*/
utils.c:    size -= 4;
utils.c:    size --;
utils.c:/* Copia de espacio de kernel a espacio de usuario, devuelve 0 si ok y -1 si error*/
utils.c:    size -= 4;
utils.c:    size --;
utils.c: * - modifies the 64-bit dividend _in_place_
utils.c: * - returns the 32-bit remainder
Binary file .vscode/ipch/8c71e6eb0dd1290a/utils.ipch matches
Binary file .vscode/ipch/b51087ffc45b0ecb/libc.ipch matches
Binary file .vscode/ipch/181ce414384237ce/system.ipch matches
Binary file .vscode/ipch/137aae52d177be50/sched.ipch matches
Binary file .vscode/ipch/2c41d1a5aa43d28/user.ipch matches
Binary file .vscode/ipch/cd1a2b3b5c149313/io.ipch matches
Binary file .vscode/ipch/989685a47da43038/interrupt.ipch matches
Binary file .vscode/ipch/dd5e742e8d2ae2d6/sys.ipch matches
system.lds: *  system.lds - Linker Script for ZeOS system image.
Binary file user.o matches
output.txt:bochs -q -f .bochsrc
output.txt:-->Running 33 Tests: deliver 2 <--
output.txt:* Running Test [0] : [testGetPID] TEST GETPID-- result OK
output.txt:* Running Test [1] : [testNiceRes] CHECK GET/SET_QUANTUM RESULT-- result OK
output.txt:* Running Test [2] : [testMemP0] TEST PHYSICAL MEMORY INITIALIZATION P1-- result OK
output.txt:* Running Test [3] : [testGetStatsCurrent] GET_STATS(pid is current process)Error code: 0: Operation not permitted TEST: get_stats returns a wrong value -- result BAD
output.txt:-- result BAD
output.txt: TEST: Ready->Run transitions are not accounted right!
output.txt:-- result BAD
output.txt: TEST: get_stats does not update remaining tics -- result BAD
output.txt: TEST: get_stats does not update user_ticks -- result BAD
output.txt:* Running Test [8] : [testFatherResultFork] FORK FATHER RESULT-- result OK
output.txt:* Running Test [9] : [testChildResultFork] FORK CHILD RESULTError: process survives after exit!-- result OK
output.txt:* Running Test [10] : [testForkInheritQuantum] FORK INHERIT QUANTUMError: process survives after exit!-- result OK
output.txt:* Running Test [11] : [testForkResetStats] FORK RESET STATSError code: 0: Operation not permitted INITTEST: get_stats returns a negative value -- result BAD
output.txt:* Running Test [12] : [testTicsAccountingRunning] GET_STATS INCREASING TICKS FOR RUNNING PROCESSESError code: 0: Operation not permitted INITTEST: get_stats returns a negative value-- result OK
output.txt:* Running Test [13] : [testNiceFunctionality] NICE EFFECTS ON SCHEDULINGError code: 0: Operation not permitted TEST: unable to get child stats -- result BAD
output.txt:* Running Test [14] : [testCopyGlobalMemory1] FORK DATA COPY: INHERIT AND DO NOT SHARE WITH FATHER)Error: process survives after exit!-- result OK
output.txt:* Running Test [15] : [testCopyGlobalMemory2] FORK DATA COPY: INHERIT AND DO NOT SHARE WITH BROTHERS INITTEST: Error creating child processError: process survives after exit!Error: process survives after exit!-- result BAD
output.txt:* Running Test [16] : [testForkHierarchy] FORK PROCESS HIERARCHY CREATION TEST: Error creating process hierarchy-- result BAD
output.txt:* Running Test [17] : [testExitFreesMem] TEST EXIT FREES DATA FRAMES TEST: Error creating process. Is memory freed after exit?-- result BAD
output.txt:* Running Test [18] : [testExit] EXIT REGULAR PROCES  INITTEST: unable to create a child process-- result BAD
output.txt:* Running Test [19] : [testOutOfRangeFork] FORK OUT OF RANGE DETECTIONTEST: Fork returns a negative number, but errno is different from EAGAIN or ENOMEM-- result MEDIUM
output.txt:* Running Test [20] : [testForkReuse] FORK DATA STRUCTURES RECYCLING AFTER EXITTEST: Fork returns a negative number, but errno is different from EAGAIN or ENOMEMTEST: Fork returns a negative number, but errno is different from EAGAIN or ENOMEM-- result MEDIUM
output.txt: INITTEST: unable to get current process stats -- result BAD
output.txt:* Running Test [22] : [testRoundRobinSwithcNb] ROUND ROBINError code: 0: Operation not permitted INITTEST: fork returns a negative value -- result BAD
output.txt:* Running Test [23] : [testTicsAccountingBlocked] GET_STATS INCREASING TICKS FOR BLOCKED PROCESSESError code: 0: Operation not permitted INITTEST: fork returns a negative value -- result BAD
output.txt:* Running Test [24] : [testGetStatsInvalidPID] GET_STATS(pid parameter is negative)Error code: 0: Operation not permitted TEST: get_stats returns a negative value, but errno is different from EINVAL-- result MEDIUM
output.txt:* Running Test [25] : [testGetStatsUnknownPID] GET_STATS(pid parameter does not exist)Error code: 0: Operation not permitted TEST: get_stats returns a negative value, but errno is different from ESRCH-- result MEDIUM
output.txt:* Running Test [26] : [testGetStatsReady] GET_STATS(process is ready)Error code: 0: Operation not permitted INITTEST: fork returns a negative value -- result BAD
output.txt:* Running Test [27] : [testGetStatsBlocked] GET_STATS(process is blocked)Error code: 0: Operation not permitted INITTEST: fork returns a negative value -- result BAD
output.txt:* Running Test [28] : [testGetStatsDead] GET_STATS(process is dead)Error code: 0: Operation not permitted INITTEST: fork returns a negative value -- result BAD
output.txt:* Running Test [29] : [testGetStatsInvalidAddress] GET_STATS(address parameter is NULL)Error code: 0: Operation not permitted TEST: get_stats returns a negative value, but errno is different from EFAULT-- result MEDIUM
output.txt:* Running Test [30] : [testGetStatsInvalidAddress1] GET_STATS(address parameter in kernel address space)Error code: 0: Operation not permitted TEST: get_stats returns a negative value, but errno is different from EFAULT-- result MEDIUM
output.txt:* Running Test [31] : [testGetStatsInvalidAddress2] GET_STATS(address parameter outside user address space)Error code: 0: Operation not permitted TEST: get_stats returns a negative value, but errno is different from EFAULT-- result MEDIUM
output.txt:* Running Test [32] : [testIndependentQuantums] FORK FATHER AND CHILDREN DO NOT SHARE QUANTUMError code: 0: Operation not permitted INITTEST: fork returns a negative value -- result BAD
output.txt:--> Test final summary: deliver 2 <--
output.txt:Test[0]: [testGetPID] TEST GETPID -- Result: OK
output.txt:Test[1]: [testNiceRes] CHECK GET/SET_QUANTUM RESULT -- Result: OK
output.txt:Test[2]: [testMemP0] TEST PHYSICAL MEMORY INITIALIZATION P1 -- Result: OK
output.txt:Test[3]: [testGetStatsCurrent] GET_STATS(pid is current process) -- Result: BAD TEST: get_stats returns a wrong value 
output.txt:Test[4]: [testAccountCS] GET_STATS accounts context switches -- Result: BAD INITTEST: unable to get stats 1
output.txt:Test[5]: [testAccountCSwoBlock] GET_STATS accounts context switches without blocking -- Result: BAD TEST: Ready->Run transitions are not accounted right!
output.txt:Test[6]: [testTicsAccountingRemaining] GET_STATS DECREASING REMAINING TICKS FOR RUNNING PROCESSES -- Result: BAD TEST: get_stats does not update remaining tics 
output.txt:Test[7]: [testTicsAccountingRunning2] GET_STATS INCREASING TICKS FOR RUNNING PROCESSES -- Result: BAD TEST: get_stats does not update user_ticks 
output.txt:Test[8]: [testFatherResultFork] FORK FATHER RESULT -- Result: OK
output.txt:Test[9]: [testChildResultFork] FORK CHILD RESULT -- Result: OK
output.txt:Test[10]: [testForkInheritQuantum] FORK INHERIT QUANTUM -- Result: OK
output.txt:Test[11]: [testForkResetStats] FORK RESET STATS -- Result: BAD INITTEST: get_stats returns a negative value 
output.txt:Test[12]: [testTicsAccountingRunning] GET_STATS INCREASING TICKS FOR RUNNING PROCESSES -- Result: OK
output.txt:Test[13]: [testNiceFunctionality] NICE EFFECTS ON SCHEDULING -- Result: BAD TEST: unable to get child stats 
output.txt:Test[14]: [testCopyGlobalMemory1] FORK DATA COPY: INHERIT AND DO NOT SHARE WITH FATHER) -- Result: OK
output.txt:Test[15]: [testCopyGlobalMemory2] FORK DATA COPY: INHERIT AND DO NOT SHARE WITH BROTHERS -- Result: BAD INITTEST: Error creating child process
output.txt:Test[16]: [testForkHierarchy] FORK PROCESS HIERARCHY CREATION -- Result: BAD TEST: Error creating process hierarchy
output.txt:Test[17]: [testExitFreesMem] TEST EXIT FREES DATA FRAMES -- Result: BAD TEST: Error creating process. Is memory freed after exit?
output.txt:Test[18]: [testExit] EXIT REGULAR PROCES  -- Result: BAD INITTEST: unable to create a child process
output.txt:Test[19]: [testOutOfRangeFork] FORK OUT OF RANGE DETECTION -- Result: MEDIUMTEST: Fork returns a negative number, but errno is different from EAGAIN or ENOMEMSKIPPED
output.txt:Test[20]: [testForkReuse] FORK DATA STRUCTURES RECYCLING AFTER EXIT -- Result: MEDIUMTEST: Fork returns a negative number, but errno is different from EAGAIN or ENOMEMSKIPPED
output.txt:Test[21]: [testRoundRobinQuantumRem] FULL QUANTUM AFTER CTX SWITCH -- Result: BAD INITTEST: unable to get current process stats 
output.txt:Test[22]: [testRoundRobinSwithcNb] ROUND ROBIN -- Result: BAD INITTEST: fork returns a negative value 
output.txt:Test[23]: [testTicsAccountingBlocked] GET_STATS INCREASING TICKS FOR BLOCKED PROCESSES -- Result: BAD INITTEST: fork returns a negative value 
output.txt:Test[24]: [testGetStatsInvalidPID] GET_STATS(pid parameter is negative) -- Result: MEDIUM TEST: get_stats returns a negative value, but errno is different from EINVALSKIPPED
output.txt:Test[25]: [testGetStatsUnknownPID] GET_STATS(pid parameter does not exist) -- Result: MEDIUM TEST: get_stats returns a negative value, but errno is different from ESRCHSKIPPED
output.txt:Test[26]: [testGetStatsReady] GET_STATS(process is ready) -- Result: BAD INITTEST: fork returns a negative value 
output.txt:Test[27]: [testGetStatsBlocked] GET_STATS(process is blocked) -- Result: BAD INITTEST: fork returns a negative value 
output.txt:Test[28]: [testGetStatsDead] GET_STATS(process is dead) -- Result: BAD INITTEST: fork returns a negative value 
output.txt:Test[29]: [testGetStatsInvalidAddress] GET_STATS(address parameter is NULL) -- Result: MEDIUM TEST: get_stats returns a negative value, but errno is different from EFAULTSKIPPED
output.txt:Test[30]: [testGetStatsInvalidAddress1] GET_STATS(address parameter in kernel address space) -- Result: MEDIUM TEST: get_stats returns a negative value, but errno is different from EFAULTSKIPPED
output.txt:Test[31]: [testGetStatsInvalidAddress2] GET_STATS(address parameter outside user address space) -- Result: MEDIUM TEST: get_stats returns a negative value, but errno is different from EFAULTSKIPPED
output.txt:Test[32]: [testIndependentQuantums] FORK FATHER AND CHILDREN DO NOT SHARE QUANTUM -- Result: BAD INITTEST: fork returns a negative value 
libc.c:    "Cross-device link", 
libc.c:    "Read-only file system", 
libc.c:    "Socket operation on non-socket", 
libc.c:    b[i1]=b[i-i1-1];
libc.c:    b[i-i1-1]=c;
Binary file system.o matches
entry.s:# 1 "<built-in>"
entry.s:# 1 "<command-line>"
entry.s:# 31 "<command-line>"
entry.s:# 1 "/usr/include/stdc-predef.h" 1 3 4
entry.s:# 32 "<command-line>" 2
entry.s: movl $-38, %eax;
entry.s: movl $-38, %EAX;
Binary file system.out matches
Binary file bootsect.o matches
sys.c: * sys.c - Syscalls implementation
sys.c:  if (fd!=1) return -9; /*EBADF*/
sys.c:  if (permissions!=ESCRIPTURA) return -13; /*EACCES*/
sys.c:	return -38; /*ENOSYS*/
sys.c:  int ret = current()->PID;
sys.c:  if(list_empty(&freequeue)) return -EAGAIN; // No free process
sys.c:      return -ENOMEM; // Out of memory :(((
sys.c:    set_cr3(current_task_struct->dir_pages_baseAddr);
sys.c:  new_task_struct->PID = NEXT_PID;
sys.c:  new_task_struct->state = ST_READY;
sys.c:  new_task_union->task.kernel_esp = newEBP - sizeof(long);
sys.c:  new_task_union->stack[offsetEBP/sizeof(long)] = (long)&ret_from_frok;
sys.c:  new_task_union->stack[offsetEBP/sizeof(long) - 1] = 0;
sys.c:  list_add_tail(&new_task_struct->list, &readyqueue);
sys.c:  return new_task_struct->PID;
sys.c:    return -correct_fd;
sys.c:		int res = size - offset;
sys.c:  current()->PID = -1;
sys.c:    if((&task[i])->task.PID == pid) return (struct task_struct *)&task[i];
sys.c:    return -1;
sys.c:  if(!access_ok(VERIFY_WRITE, st, sizeof(struct stats))) return -EACCES;
sys.c:  t->s.remaining_ticks = t->quantum;
sys.c:  copy_to_user(&t->s, st, sizeof(struct stats));
build.c: *  $Id: build.c,v 1.1.1.1 2006-09-04 15:05:34 jcosta Exp $
build.c: * This file builds a disk-image from three different files:
build.c: * - bootsect: exactly 512 bytes of 8086 machine code, loads the rest
build.c: * - setup: 8086 machine code, sets up system parm
build.c: * - system: 80386 code for actual system
build.c:		die("%s: Non-Minix header", name);
build.c:		sz -= l;
build.c:		uz -= l;
bochsout.txt:00000000000i[      ]   x86-64 support: no
bochsout.txt:00000000000i[MEM0  ] rom at 0xfffe0000/131072 ('/opt/bochs_gdb/share/bochs/BIOS-bochs-latest')
bochsout.txt:00000000000i[DEV   ] PIIX3 PCI-to-ISA bridge present at device 1, function 0
bochsout.txt:00000000000i[MEM0  ] Register memory access handlers: 0x0000000a0000 - 0x0000000bffff
bochsout.txt:00000000000i[MEM0  ] Register memory access handlers: 0x0000e0000000 - 0x0000e0ffffff
bochsout.txt:00000000000i[MEM0  ] rom at 0xc0000/41472 ('/opt/bochs_gdb/share/bochs/VGABIOS-lgpl-latest')
bochsout.txt:00000000000i[MEM0  ] Register memory access handlers: 0x0000fec00000 - 0x0000fec00fff
bochsout.txt:00000004661i[BIOS  ] $Revision: 12412 $ $Date: 2014-07-10 09:28:59 +0200 (Do, 10. Jul 2014) $
bochsout.txt:00000318049i[KBD   ] reset-disable command received
bochsout.txt:00001045839i[PIDE  ] new BM-DMA address: 0xc000
bochsout.txt:01410161000i[CPU0  ] 0x00011e33>> jmp .-2 (0x00011e33) : EBFE
wrapper.S:	mov $-1, %eax;
wrapper.S:	mov $-1, %eax // return -1
Binary file include/asm.h matches
include/stats.h:  unsigned long total_trans; /* Number of times the process has got the CPU: READY->RUN transitions */
include/entry.h: * entry.h - Definició del punt d'entrada de les crides al sistema
include/mm.h: * mm.h - Capçalera del mòdul de gestió de memòria
include/zeos_error.h:#define EXDEV           18      /* Cross-device link */
include/zeos_error.h:#define EROFS           30      /* Read-only file system */
include/zeos_error.h:#define ENOTSOCK        88      /* Socket operation on non-socket */
include/mm_address.h:#define USER_ESP	L_USER_START+(NUM_PAG_CODE+NUM_PAG_DATA)*0x1000-16
include/types.h: * types.h - Definició de tipus i estructures de dades
include/types.h:} Descriptor;     /* R1: pg. 3-11, 4-3 */
include/types.h:} Gate;     /* R1: pg. 5-11 */
include/types.h:  Word  PreviousTaskLink;   /* 0          R1: pg. 6-5  */
include/types.h:  Word  ss1;                /* 16 |-    for each       */
include/types.h:  DWord edi;                /* 68 |- Saved registers   */
include/types.h:/*  /--------------------------------------\  */
include/types.h:/*  \--------------------------------------/  */
include/types.h:/*                             R1: pg. 2-10   */
include/types.h:/*  /--------------------------------------\           */
include/types.h:/*  \--------------------------------------/           */
include/types.h:/*  TI    = 0 -> GDT ; 1 -> LDT                        */
include/types.h:/*  RPL   = Requestor Privilege Level     R1: pg. 3-9  */
include/types.h:/*** THE EFLAGS ****************************************** R1: pg. 2-8 ****/
include/types.h:/**   -----------------------------------------------------------------  **/
include/types.h:/**   -----------------------------------------------------------------  **/
include/list.h: *   realelement->a = 0x666;
include/list.h: * INIT_LIST_HEAD - Initializes an empty list.
include/list.h: * list_add - add a new entry
include/list.h: * list_add_tail - add a new entry
include/list.h: * list_del - deletes entry from list.
include/list.h: * list_is_last - tests whether @list is the last entry in list @head
include/list.h: * list_empty - tests whether a list is empty
include/list.h: * list_entry - get the struct for this entry
include/list.h:            ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
include/list.h: * list_for_each	-	iterate over a list
include/list.h:	for (pos = (head)->next; pos != (head); pos = pos->next)
include/list.h: * list_for_each_safe   -       iterate over a list safe against removal of list entry
include/list.h:        for (pos = (head)->next, n = pos->next; pos != (head); \
include/list.h:                pos = n, n = pos->next)
include/list.h: * list_first   -   returns the first list item
include/list.h:         (head)->next
include/hardware.h: * hardware.h - Rutines hardware per manegar els accesos a baix nivell
include/hardware.h: *   x = 0 -> activada
include/hardware.h: *   x = 1 -> no activada
include/io.h: * io.h - Definició de l'entrada/sortida per pantalla en mode sistema
include/segment.h: * segment.h - Constants de segment per a les entrades de la GDT
include/libc.h: * libc.h - macros per fer els traps amb diferents arguments
include/sched.h: * sched.h - Estructures i macros pel tractament de processos
include/sched.h:#define KERNEL_ESP(t)       	(DWord) &(t)->stack[KERNEL_STACK_SIZE]
include/interrupt.h: * interrupt.h - Definició de les diferents rutines de tractament d'exepcions
include/system.h: * system.h - Capçalera del mòdul principal del sistema operatiu
user.lds: *  ZeOS - jcosta septembre 2006
user.lds: *  user.lds - Linker Script to create user memory image
Binary file interrupt.o matches
.bochsrc_gdb:#romimage: file=$BXSHARE/BIOS-bochs-latest
.bochsrc_gdb:#vgaromimage: file=$BXSHARE/VGABIOS-elpin-2.40
.bochsrc_gdb:debugger_log: -
Binary file io.o matches
.bochsrc:#romimage: file=$BXSHARE/BIOS-bochs-latest
.bochsrc:#vgaromimage: file=$BXSHARE/VGABIOS-elpin-2.40
.bochsrc:debugger_log: -
.gdbcmd.template:define print-stack
.gdbcmd.template:add-symbol-file user XXXXXX
Binary file libauxjp.a matches
io.c: * io.c - 
list.c:	list->next = list;
list.c:	list->prev = list;
list.c:	next->prev = new;
list.c:	new->next = next;
list.c:	new->prev = prev;
list.c:	prev->next = new;
list.c: * list_add - add a new entry
list.c:	__list_add(new, head, head->next);
list.c: * list_add_tail - add a new entry
list.c:	__list_add(new, head->prev, head);
list.c:	next->prev = prev;
list.c:	prev->next = next;
list.c: * list_del - deletes entry from list.
list.c:	__list_del(entry->prev, entry->next);
list.c:	entry->next = (void*) 0;
list.c:	entry->prev = (void*) 0;
list.c: * list_is_last - tests whether @list is the last entry in list @head
list.c:	return list->next == head;
list.c: * list_empty - tests whether a list is empty
list.c:	return head->next == head;
Binary file bootsect matches
bootsect.S:SETUPSECS = 0			! default nr of setup-sectors
bootsect.S:BOOTSEG   = 0x07C0		! original address of boot-sector
bootsect.S:INITSEG   = 0x9000		! final address of boot-sector
bootsect.S:SYSSEG    = 0x1000		! kernel (protected-mode) address
bootsect.S:go:	mov	di,#0x4000-12	! 0x4000 is arbitrary value >= length of
bootsect.S:	mov	ss,ax		! put stack at INITSEG:0x4000-12.
bootsect.S:! well, that went ok, I hope. Now we have to reprogram the interrupts :-(
bootsect.S:! we put them right after the intel-reserved hardware interrupts, at
bootsect.S:! int 0x20-0x2F. There they won't mess up anything. Sadly IBM really
bootsect.S:! rectify it afterwards. Thus the bios puts interrupts at 0x08-0x0f,
bootsect.S:	out	#0x20,al	! send it to 8259A-1
bootsect.S:	out	#0xA0,al	! and to 8259A-2
bootsect.S:	mov	al,#0x04	! 8259-1 is master
bootsect.S:	mov	al,#0x02	! 8259-2 is slave
bootsect.S:! things as simple as possible, we do no register set-up or anything,
bootsect.S:! we let the GNU-compiled 32-bit programs do that. We just jump to
bootsect.S:! in 32-bit protected mode.
bootsect.S:	mov	cr0,eax		! a partir del i386 aix�ja � possible fer-ho
bootsect.S:! Well, that certainly wasn't fun :-(. Hopefully it works, and we don't
bootsect.S:! need no steenking BIOS anyway (except for the initial loading :-).
bootsect.S:!	Manual, Mixing 16-bit and 32-bit code, page 16-6)
bootsect.S:	db	0x66,0xea	! prefix + jmpi-opcode
bootsect.S:! in:	es - starting address segment (normally 0x1000)
bootsect.S:	jnz	empty_8042_loop	! yes - loop
bootsect.S:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
bootsect.S:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
bootsect.S:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
bootsect.S:  .word  0xFFFF           ! 4Gb - (0x100000*0x1000 = 4Gb)
wrapper.s:# 1 "<built-in>"
wrapper.s:# 1 "<command-line>"
wrapper.s:# 31 "<command-line>"
wrapper.s:# 1 "/usr/include/stdc-predef.h" 1 3 4
wrapper.s:# 32 "<command-line>" 2
wrapper.s: mov $-1, %eax;
wrapper.s: mov $-1, %eax
stats:sched.c:	return t->dir_pages_baseAddr;
stats:sched.c:	return (page_table_entry *)(((unsigned int)(t->dir_pages_baseAddr->bits.pbase_addr))<<12);
stats:sched.c:	pos = ((int)t-(int)task)/sizeof(union task_union);
stats:sched.c:	t->dir_pages_baseAddr = (page_table_entry*) &dir_pages[pos]; 
stats:sched.c:		t->quantum = DEFAULT_QUANTUM;
stats:sched.c:		t->PID = i+2;
stats:sched.c:		t->state = -1;
stats:sched.c:		list_add_tail( &t->list, &freequeue );
stats:sched.c:	t->quantum = DEFAULT_QUANTUM;
stats:sched.c:	return t->quantum;
stats:sched.c:	if(t->state != ST_RUN){
stats:sched.c:		list_del(&t->list);
stats:sched.c:		list_add_tail(&t->list, dest);
stats:sched.c:		t->state = ST_READY;
stats:sched.c:		t->state = 1;
stats:sched.c:		t->state = ST_RUN;
stats:sched.c:	t->state = ST_READY;
stats:.gdbcmd:define print-stack
stats:Makefile:HOSTCFLAGS = -Wall -Wstrict-prototypes -g
stats:Makefile:CFLAGS = -O2  -g $(JP) -fno-omit-frame-pointer -ffreestanding -Wall -I$(INCLUDEDIR)
stats:Makefile:	gcc -m32 -g -fno-omit-frame-pointer -ffreestanding -Wall -Iinclude   -c -o user.o user.c
stats:Makefile2:HOSTCFLAGS = -Wall -Wstrict-prototypes -g
stats:Makefile2:CFLAGS = -O2  -g $(JP) -fno-omit-frame-pointer -ffreestanding -Wall -I$(INCLUDEDIR)
stats:bootsect.s:# 1 "<built-in>"
stats:bootsect.s:BOOTSEG   = 0x07C0		! original address of boot-sector
stats:bootsect.s:INITSEG   = 0x9000		! final address of boot-sector
stats:bootsect.s:! things as simple as possible, we do no register set-up or anything,
stats:entry.s:# 1 "<built-in>"
stats:sys.c:    set_cr3(current_task_struct->dir_pages_baseAddr);
stats:sys.c:  new_task_struct->PID = NEXT_PID;
stats:sys.c:  list_add_tail(&new_task_struct->list, &readyqueue);
stats:sys.c:  return new_task_struct->PID;
stats:sys.c:  t->stats.user_ticks = 500;
stats:sys.c:  copy_to_user(&t->s, st, sizeof(struct stats));
stats:include/list.h: *   realelement->a = 0x666;
stats:.gdbcmd.template:define print-stack
stats:list.c:	list->next = list;
stats:list.c:	list->prev = list;
stats:list.c:	next->prev = new;
stats:list.c:	next->prev = prev;
stats:list.c:	return list->next == head;
stats:bootsect.S:BOOTSEG   = 0x07C0		! original address of boot-sector
stats:bootsect.S:INITSEG   = 0x9000		! final address of boot-sector
stats:bootsect.S:! things as simple as possible, we do no register set-up or anything,
stats:sys_call_table.s:# 1 "<built-in>"
sys_call_table.s:# 1 "<built-in>"
sys_call_table.s:# 1 "<command-line>"
sys_call_table.s:# 31 "<command-line>"
sys_call_table.s:# 1 "/usr/include/stdc-predef.h" 1 3 4
sys_call_table.s:# 32 "<command-line>" 2
sys_call_table.s:MAX_SYSCALL = (. - sys_call_table)/4
Binary file user.out matches
Binary file utils.o matches
Binary file devices.o matches
hardware.c: *   x = 0 -> enabled
hardware.c: *   x = 1 -> disabled
hardware.c:  : "i" (0b11111100)       /* 0xFF = 11111111 -> all bits disabled */
system.c: * system.c - 
system.c: *   DS, ES, FS, GS <- DS
system.c: *   SS:ESP <- DS:DATA_SEGMENT_SIZE
system.c: * cld -> gcc2 wants DF (Direction Flag (eFlags.df))
system.c:      esp = esp - 5*sizeof(DWord); /* To avoid overwriting task 1 */
Binary file list.o matches
entry.S: * entry.S - Entry point to system mode from user mode
entry.S:/**   0(%esp) - %ebx    \                        **/
entry.S:/**   4(%esp) - %ecx     |                       **/
entry.S:/**   8(%esp) - %edx     |                       **/
entry.S:/**   C(%esp) - %esi     | Register saved        **/
entry.S:/**  10(%esp) - %edi     |  by 'save'            **/
entry.S:/**  14(%esp) - %ebp     |                       **/
entry.S:/**  18(%esp) - %eax     |                       **/
entry.S:/**  1C(%esp) - %ds      |                       **/
entry.S:/**  20(%esp) - %es      |                       **/
entry.S:/**  24(%esp) - %fs      |                       **/
entry.S:/**  28(%esp) - %gs     /                        **/
entry.S:/**  2C(%esp) - %eip    \                        **/
entry.S:/**  30(%esp) - %cs      |                       **/
entry.S:/**  34(%esp) - %eflags  |  Return context saved **/
entry.S:/**  38(%esp) - %oldesp  |   by the processor.   **/
entry.S:/**  3C(%esp) - %oldss  /                        **/
entry.S:	// 1 - Save registers
entry.S:	// 2 - Call inner_task_switch
entry.S:	//3 - Restore
entry.S:	movl $-38, %eax;
entry.S:	movl $-ENOSYS, %EAX;
